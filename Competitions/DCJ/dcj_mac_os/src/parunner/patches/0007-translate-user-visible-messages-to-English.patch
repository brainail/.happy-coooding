From 40100b7a3dcc1275b69e13d32374b6d78c43a303 Mon Sep 17 00:00:00 2001
From: Robert Obryk <robryk@google.com>
Date: Mon, 4 May 2015 21:18:15 +0200
Subject: [PATCH] translate user-visible messages to English

This change is not supposed to be upstreamed in this form. I will try to
find a way to keep both language versions in the same codebase.
---
 comm.go      |  4 ++--
 instances.go |  2 +-
 main.go      | 42 +++++++++++++++++++++---------------------
 route.go     |  4 ++--
 util.go      |  2 +-
 5 files changed, 27 insertions(+), 27 deletions(-)

diff --git comm.go comm.go
index 2d532fb..e043a89 100644
--- comm.go
+++ comm.go
@@ -57,7 +57,7 @@ type ErrMessageCount struct {
 }
 
 func (err ErrMessageCount) Error() string {
-	return fmt.Sprintf("przekroczony limit (%d) liczby wysłanych wiadomości", *messageCountLimit)
+	return fmt.Sprintf("sent message count limit (%d) exceeded", *messageCountLimit)
 }
 
 // ErrMessageSize is returned when an instance exceeds the per-instance total messages size limit.
@@ -66,7 +66,7 @@ type ErrMessageSize struct {
 }
 
 func (err ErrMessageSize) Error() string {
-	return fmt.Sprintf("przekroczony limit (%d bajtów) sumarycznego rozmiaru wysłanych wiadomości", *messageSizeLimit)
+	return fmt.Sprintf("total sent message size limit (%d bytes) exceeded", *messageSizeLimit)
 }
 
 func writeMessage(w io.Writer, message *Message) error {
diff --git instances.go instances.go
index f782a79..6e65ef6 100644
--- instances.go
+++ instances.go
@@ -14,7 +14,7 @@ type InstanceError struct {
 }
 
 func (ie InstanceError) Error() string {
-	return fmt.Sprintf("Błąd instancji %d: %v", ie.ID, ie.Err)
+	return fmt.Sprintf("Error of instance %d: %v", ie.ID, ie.Err)
 }
 
 // RunInstances starts each command from cmds in an Instance and
diff --git main.go main.go
index 3fb6b2b..54ba230 100644
--- main.go
+++ main.go
@@ -17,13 +17,13 @@ import (
 
 const MaxInstances = 100
 
-var nInstances = flag.Int("n", 1, fmt.Sprintf("Liczba instancji, z zakresu [1,%d]", MaxInstances))
-var stdoutHandling = flag.String("stdout", "contest", "Obługa standardowego wyjścia: contest, all, tagged, files")
-var stderrHandling = flag.String("stderr", "all", "Obsługa standardowe wyjścia diagnostycznego: all, tagged, files")
-var filesPrefix = flag.String("prefix", "", "Prefiks nazwy plików wyjściowych generowanych przez -stdout=files i -stderr=files")
-var warnRemaining = flag.Bool("warn_unreceived", true, "Ostrzegaj o wiadomościach, które pozostały nieodebrane po zakończeniu się instancji")
-var stats = flag.Bool("print_stats", false, "Na koniec wypisz statystyki dotyczące poszczególnych instancji")
-var traceCommunications = flag.Bool("trace_comm", false, "Wypisz na standardowe wyjście diagnostyczne informację o każdej wysłanej i odebranej wiadomości")
+var nInstances = flag.Int("n", 1, fmt.Sprintf("Number of instances; must be from the [1,%d] range", MaxInstances))
+var stdoutHandling = flag.String("stdout", "contest", "Stdout handling: contest, all, tagged, files")
+var stderrHandling = flag.String("stderr", "all", "Stderr handling: all, tagged, files")
+var filesPrefix = flag.String("prefix", "", "Filename prefix for files generated by -stdout=files and -stderr=files")
+var warnRemaining = flag.Bool("warn_unreceived", true, "Warn about messages that remain unreceived after instance's termination")
+var stats = flag.Bool("print_stats", false, "Print per-instance statistics")
+var traceCommunications = flag.Bool("trace_comm", false, "Print out a trace of all messages exchanged")
 
 var binaryPath string
 
@@ -49,13 +49,13 @@ func writeFile(streamType string, i int, r io.Reader) error {
 }
 
 func Usage() {
-	fmt.Fprintf(os.Stderr, "Uzycie: %s [opcje] program_do_uruchomienia\n", os.Args[0])
+	fmt.Fprintf(os.Stderr, "Usage: %s [flags] binary_to_run\n", os.Args[0])
 	flag.PrintDefaults()
-	fmt.Fprintf(os.Stderr, `Sposoby obsługi wyjścia:
-  contest: Wymuszaj, żeby tylko jedna instancja pisała na standardowe wyjście. Przekieruj jej wyjście na standardowe wyjście tego programu.
-  all: Przekieruj wyjście wszystkich instancji na analogiczne wyjście tego programu.
-  tagged: Przekieruj wyjście wszystkich instancji na analogiczne wyjście tego programy, dopisując numer instancji na początku każdej linijki.
-  files: Zapisz wyjście każdej instancji w osobnym pliku.
+	fmt.Fprintf(os.Stderr, `Output handling modes:
+  contest: Fail if more than one instance write any output. Redirect the output to the standard output of this program.
+  all: Redirect all the instances' outputs to the corresponding output of this program.
+  tagged: Redirect all the instances' outputs to the corresponding output of this program, while prefixing each line with instance number.
+  files: Store output of each instance in a separate file.
 `)
 }
 
@@ -65,7 +65,7 @@ func main() {
 	flag.Parse()
 
 	if flag.NArg() != 1 {
-		fmt.Fprintf(os.Stderr, "Nie podałeś programu do uruchomienia\n")
+		fmt.Fprintf(os.Stderr, "Specify the binary name\n")
 		flag.Usage()
 		os.Exit(1)
 	}
@@ -77,7 +77,7 @@ func main() {
 	}
 
 	if *nInstances < 1 || *nInstances > MaxInstances {
-		fmt.Fprintf(os.Stderr, "Liczba instancji powinna być z zakresu [1,%d], a podałeś %d\n", MaxInstances, *nInstances)
+		fmt.Fprintf(os.Stderr, "Number of instances should be from [1,%d], but %d was given\n", MaxInstances, *nInstances)
 		flag.Usage()
 		os.Exit(1)
 	}
@@ -93,7 +93,7 @@ func main() {
 	case "files":
 		writeStdout = func(i int, r io.Reader) error { return writeFile("stdout", i, r) }
 	default:
-		fmt.Fprintf(os.Stderr, "Niewłaściwa metoda obsługi standardowego wyjścia: %s", *stdoutHandling)
+		fmt.Fprintf(os.Stderr, "Invalid stdout handling mode: %s", *stdoutHandling)
 		flag.Usage()
 		os.Exit(1)
 	}
@@ -105,7 +105,7 @@ func main() {
 	case "files":
 		writeStdout = func(i int, r io.Reader) error { return writeFile("stderr", i, r) }
 	default:
-		fmt.Fprintf(os.Stderr, "Niewłaściwa metoda obsługi standardowego wyjścia diagnostycznego: %s", *stdoutHandling)
+		fmt.Fprintf(os.Stderr, "Inalid stderr handling mode: %s", *stdoutHandling)
 		flag.Usage()
 		os.Exit(1)
 	}
@@ -186,9 +186,9 @@ func main() {
 			for _, p := range er.RemainingMessages {
 				m[p.To] = append(m[p.To], p.From)
 			}
-			fmt.Fprintf(os.Stderr, "Uwaga: następujące instancje nie odebrały wszystkich wiadomości dla nich przeznaczonych nim się zakończyły:\n")
+			fmt.Fprintf(os.Stderr, "Warning: following instances had some messages left after they've terminated:\n")
 			for dest, srcs := range m {
-				fmt.Fprintf(os.Stderr, "Instancja %d nie odebrała wiadomości od instancji: ", dest)
+				fmt.Fprintf(os.Stderr, "Instance %d did not receive message from instances: ", dest)
 				for _, src := range srcs {
 					fmt.Fprintf(os.Stderr, "%d ", src)
 				}
@@ -209,10 +209,10 @@ func main() {
 			lastInstance = i
 		}
 	}
-	fmt.Fprintf(os.Stderr, "Czas trwania: %v (najdłużej działająca instancja: %d)\n", maxTime, lastInstance)
+	fmt.Fprintf(os.Stderr, "Duration: %v (longest running instance: %d)\n", maxTime, lastInstance)
 	if *stats {
 		w := tabwriter.NewWriter(os.Stderr, 2, 1, 1, ' ', 0)
-		io.WriteString(w, "Instancja\tCzas całkowity\tCzas CPU\tCzas oczekiwania\tWysłane wiadomości\tWysłane bajty\n")
+		io.WriteString(w, "Instance\tTotal time\tCPU time\tTime spent waiting\tSent messages\tSent bytes\n")
 		for i, instance := range instances {
 			fmt.Fprintf(w, "%d\t%v\t%v\t%v\t%d\t%d\n", i, instance.TimeRunning+instance.TimeBlocked, instance.TimeRunning, instance.TimeBlocked, instance.MessagesSent, instance.MessageBytesSent)
 		}
diff --git route.go route.go
index f2df9ad..76875a5 100644
--- route.go
+++ route.go
@@ -16,7 +16,7 @@ type ErrDeadlock struct {
 }
 
 func (e ErrDeadlock) Error() string {
-	return "wszystkie niezakończone instancje są zablokowane"
+	return "all instances have either terminated or are deadlocked"
 }
 
 // An ErrRemainingMessages represents a situation when some messages were left
@@ -28,7 +28,7 @@ type ErrRemainingMessages struct {
 }
 
 func (e ErrRemainingMessages) Error() string {
-	return "po zakończeniu działania pozostały nieodebrane wiadomości"
+	return "some messages were left unreceived after all instances have terminated"
 }
 
 // requestAndID represents a request r made by instance id
diff --git util.go util.go
index 7a16ab0..e1d1f71 100644
--- util.go
+++ util.go
@@ -25,7 +25,7 @@ func (w *contestStdoutWriter) Write(buf []byte) (int, error) {
 	if w.cs.chosenInstance == w.id {
 		return w.cs.Output.Write(buf)
 	} else {
-		return 0, fmt.Errorf("instancja %d zaczęła już wypisywać wyjście", w.cs.chosenInstance)
+		return 0, fmt.Errorf("instance %d has already started to write output", w.cs.chosenInstance)
 	}
 }
 
-- 
2.2.0.rc0.207.ga3a616c

